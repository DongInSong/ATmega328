
H3_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099a  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000811  00000000  00000000  00000ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000467  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e0  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000216  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001fda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <util/delay.h>
#include <string.h>
#include "UART.h"

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x8>
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x00; // PB1 ~ PB4
  a4:	14 b8       	out	0x04, r1	; 4
	UART_INIT();
  a6:	0e 94 a7 00 	call	0x14e	; 0x14e <UART_INIT>
	unsigned char key;
	char ox[5] = "XXXX";
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	e2 e0       	ldi	r30, 0x02	; 2
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	
	while (1)
	{
		key = PINB & 0xDF; // 0010 0000 & 1101 1111 = 0000 0000
  bc:	63 b1       	in	r22, 0x03	; 3
  be:	6f 7d       	andi	r22, 0xDF	; 223
		// 0000 0010
		// 0000 0100
		// 0000 1000
		// 0001 0000
		
		for(int i = 0; i < 4; i++) {
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	1f c0       	rjmp	.+62     	; 0x104 <main+0x6e>
			if(key & (0x1 << (i + 1))) { // 비트 검사
  c6:	ac 01       	movw	r20, r24
  c8:	4f 5f       	subi	r20, 0xFF	; 255
  ca:	5f 4f       	sbci	r21, 0xFF	; 255
  cc:	26 2f       	mov	r18, r22
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	04 2e       	mov	r0, r20
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <main+0x42>
  d4:	35 95       	asr	r19
  d6:	27 95       	ror	r18
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <main+0x3e>
  dc:	20 ff       	sbrs	r18, 0
  de:	09 c0       	rjmp	.+18     	; 0xf2 <main+0x5c>
				ox[i] = 'O';
  e0:	e1 e0       	ldi	r30, 0x01	; 1
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	ec 0f       	add	r30, r28
  e6:	fd 1f       	adc	r31, r29
  e8:	e8 0f       	add	r30, r24
  ea:	f9 1f       	adc	r31, r25
  ec:	2f e4       	ldi	r18, 0x4F	; 79
  ee:	20 83       	st	Z, r18
  f0:	08 c0       	rjmp	.+16     	; 0x102 <main+0x6c>
			}
			else ox[i] = 'X';
  f2:	e1 e0       	ldi	r30, 0x01	; 1
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ec 0f       	add	r30, r28
  f8:	fd 1f       	adc	r31, r29
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	28 e5       	ldi	r18, 0x58	; 88
 100:	20 83       	st	Z, r18
#include <util/delay.h>
#include <string.h>
#include "UART.h"

int main(void)
{
 102:	ca 01       	movw	r24, r20
		// 0000 0010
		// 0000 0100
		// 0000 1000
		// 0001 0000
		
		for(int i = 0; i < 4; i++) {
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	91 05       	cpc	r25, r1
 108:	f4 f2       	brlt	.-68     	; 0xc6 <main+0x30>
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	0e c0       	rjmp	.+28     	; 0x12c <main+0x96>
			}
			else ox[i] = 'X';
		}
		
		for(int i = 0; i < 4; i++) {
			UART_transmit(ox[i]);
 110:	e1 e0       	ldi	r30, 0x01	; 1
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	ec 0f       	add	r30, r28
 116:	fd 1f       	adc	r31, r29
 118:	e0 0f       	add	r30, r16
 11a:	f1 1f       	adc	r31, r17
 11c:	80 81       	ld	r24, Z
 11e:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_transmit>
			UART_transmit(' ');
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_transmit>
				ox[i] = 'O';
			}
			else ox[i] = 'X';
		}
		
		for(int i = 0; i < 4; i++) {
 128:	0f 5f       	subi	r16, 0xFF	; 255
 12a:	1f 4f       	sbci	r17, 0xFF	; 255
 12c:	04 30       	cpi	r16, 0x04	; 4
 12e:	11 05       	cpc	r17, r1
 130:	7c f3       	brlt	.-34     	; 0x110 <main+0x7a>
			UART_transmit(ox[i]);
			UART_transmit(' ');
		}
		UART_printString("\n");
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	87 ea       	ldi	r24, 0xA7	; 167
 13e:	91 e6       	ldi	r25, 0x61	; 97
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xaa>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xb4>
 14a:	00 00       	nop
 14c:	b7 cf       	rjmp	.-146    	; 0xbc <main+0x26>

0000014e <UART_INIT>:
}

unsigned char UART_receive(void) {
        while(!(UCSR0A & (1<<RXC0)));
        return UDR0;
}
 14e:	e0 ec       	ldi	r30, 0xC0	; 192
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	82 60       	ori	r24, 0x02	; 2
 156:	80 83       	st	Z, r24
 158:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 162:	e2 ec       	ldi	r30, 0xC2	; 194
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	86 60       	ori	r24, 0x06	; 6
 16a:	80 83       	st	Z, r24
 16c:	e1 ec       	ldi	r30, 0xC1	; 193
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 61       	ori	r24, 0x10	; 16
 174:	80 83       	st	Z, r24
 176:	80 81       	ld	r24, Z
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <UART_transmit>:

void UART_transmit(unsigned char data) {
    while(!(UCSR0A & (1<<UDRE0)));
 17e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 182:	95 ff       	sbrs	r25, 5
 184:	fc cf       	rjmp	.-8      	; 0x17e <UART_transmit>
    UDR0 = data;
 186:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 18a:	08 95       	ret

0000018c <UART_printString>:
}

void UART_printString(char *str) {
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	8c 01       	movw	r16, r24
    for(int i = 0; str[i]; i++) {
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <UART_printString+0x16>
        UART_transmit(str[i]);
 19c:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_transmit>
    while(!(UCSR0A & (1<<UDRE0)));
    UDR0 = data;
}

void UART_printString(char *str) {
    for(int i = 0; str[i]; i++) {
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	f8 01       	movw	r30, r16
 1a4:	ec 0f       	add	r30, r28
 1a6:	fd 1f       	adc	r31, r29
 1a8:	80 81       	ld	r24, Z
 1aa:	81 11       	cpse	r24, r1
 1ac:	f7 cf       	rjmp	.-18     	; 0x19c <UART_printString+0x10>
        UART_transmit(str[i]);
    }
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
