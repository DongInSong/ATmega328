
HW4_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000033a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  000003e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f2  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000838  00000000  00000000  00000eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c7  00000000  00000000  000016f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000416  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000235  00000000  00000000  000020d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000230b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  9e:	0c 94 9b 01 	jmp	0x336	; 0x336 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
volatile int count = 0;
int button = 0x08 | 0x20 | 0x80;
int state = 0;

ISR(PCINT2_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	if(PIND & 0x08) count++; else count++;
  b6:	4b 9b       	sbis	0x09, 3	; 9
  b8:	0a c0       	rjmp	.+20     	; 0xce <__vector_5+0x28>
  ba:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count>
  be:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count+0x1>
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <count+0x1>
  c8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <count>
  cc:	09 c0       	rjmp	.+18     	; 0xe0 <__vector_5+0x3a>
  ce:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count>
  d2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count+0x1>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <count+0x1>
  dc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <count>
	state = 0;
  e0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
  e4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	81 ee       	ldi	r24, 0xE1	; 225
  ec:	94 e0       	ldi	r25, 0x04	; 4
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <__vector_5+0x48>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <__vector_5+0x52>
  f8:	00 00       	nop
	_delay_ms(100);
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <INIT_PORT>:

void INIT_PORT(void)
{
	DDRB = 0x20;
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 10e:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0x00;
 110:	1a b8       	out	0x0a, r1	; 10
	PORTD |= button;
 112:	9b b1       	in	r25, 0x0b	; 11
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	89 2b       	or	r24, r25
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	08 95       	ret

0000011e <INIT_PCINT2>:
}

void INIT_PCINT2(void)
{
	PCICR |= (1 << PCIE2);
 11e:	e8 e6       	ldi	r30, 0x68	; 104
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	84 60       	ori	r24, 0x04	; 4
 126:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT19) | (1 << PCINT21) | (1 << PCINT23);
 128:	ed e6       	ldi	r30, 0x6D	; 109
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 6a       	ori	r24, 0xA8	; 168
 130:	80 83       	st	Z, r24
	sei();
 132:	78 94       	sei
 134:	08 95       	ret

00000136 <main>:
}

int main(void)
{
		INIT_PORT();
 136:	0e 94 85 00 	call	0x10a	; 0x10a <INIT_PORT>
		INIT_PCINT2();    
 13a:	0e 94 8f 00 	call	0x11e	; 0x11e <INIT_PCINT2>
		UART_INIT();
 13e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <UART_INIT>
		while (1) 
    {
		if(count > 0 && !(count % 3) && !state) {
 142:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count>
 146:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count+0x1>
 14a:	18 16       	cp	r1, r24
 14c:	19 06       	cpc	r1, r25
 14e:	3c f5       	brge	.+78     	; 0x19e <main+0x68>
 150:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count>
 154:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count+0x1>
 158:	63 e0       	ldi	r22, 0x03	; 3
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__divmodhi4>
 160:	89 2b       	or	r24, r25
 162:	e9 f4       	brne	.+58     	; 0x19e <main+0x68>
 164:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 168:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 16c:	89 2b       	or	r24, r25
 16e:	b9 f4       	brne	.+46     	; 0x19e <main+0x68>
			state = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 178:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
			UART_printString("Current Count: ");
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <UART_printString>
			UART_printNumber(count);
 184:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <count>
 188:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <count+0x1>
 18c:	07 2e       	mov	r0, r23
 18e:	00 0c       	add	r0, r0
 190:	88 0b       	sbc	r24, r24
 192:	99 0b       	sbc	r25, r25
 194:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_printNumber>
			UART_transmit('\n');
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_transmit>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	81 ee       	ldi	r24, 0xE1	; 225
 1a2:	94 e0       	ldi	r25, 0x04	; 4
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x6e>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x78>
 1ae:	00 00       	nop
 1b0:	c8 cf       	rjmp	.-112    	; 0x142 <main+0xc>

000001b2 <UART_INIT>:
}

unsigned char UART_receive(void) {
        while(!(UCSR0A & (1<<RXC0)));
        return UDR0;
}
 1b2:	e0 ec       	ldi	r30, 0xC0	; 192
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	80 83       	st	Z, r24
 1bc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1c0:	8f ec       	ldi	r24, 0xCF	; 207
 1c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1c6:	e2 ec       	ldi	r30, 0xC2	; 194
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	86 60       	ori	r24, 0x06	; 6
 1ce:	80 83       	st	Z, r24
 1d0:	e1 ec       	ldi	r30, 0xC1	; 193
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	80 83       	st	Z, r24
 1da:	80 81       	ld	r24, Z
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <UART_transmit>:

void UART_transmit(unsigned char data) {
    while(!(UCSR0A & (1<<UDRE0)));
 1e2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1e6:	95 ff       	sbrs	r25, 5
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <UART_transmit>
    UDR0 = data;
 1ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1ee:	08 95       	ret

000001f0 <UART_printString>:
}

void UART_printString(char *str) {
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	8c 01       	movw	r16, r24
    for(int i = 0; str[i]; i++) {
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <UART_printString+0x16>
        UART_transmit(str[i]);
 200:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_transmit>
    while(!(UCSR0A & (1<<UDRE0)));
    UDR0 = data;
}

void UART_printString(char *str) {
    for(int i = 0; str[i]; i++) {
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	f8 01       	movw	r30, r16
 208:	ec 0f       	add	r30, r28
 20a:	fd 1f       	adc	r31, r29
 20c:	80 81       	ld	r24, Z
 20e:	81 11       	cpse	r24, r1
 210:	f7 cf       	rjmp	.-18     	; 0x200 <UART_printString+0x10>
        UART_transmit(str[i]);
    }
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	08 95       	ret

0000021c <UART_printNumber>:

void UART_printNumber(uint32_t num) {
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	2a 97       	sbiw	r28, 0x0a	; 10
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
    int i;
    char buf[10];

    for(i = 0; num > 0; ++i) {
 234:	00 e0       	ldi	r16, 0x00	; 0
 236:	10 e0       	ldi	r17, 0x00	; 0
 238:	14 c0       	rjmp	.+40     	; 0x262 <UART_printNumber+0x46>
        buf[i] = num % 10 + '0';
 23a:	2a e0       	ldi	r18, 0x0A	; 10
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	0e 94 65 01 	call	0x2ca	; 0x2ca <__udivmodsi4>
 246:	e1 e0       	ldi	r30, 0x01	; 1
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	ec 0f       	add	r30, r28
 24c:	fd 1f       	adc	r31, r29
 24e:	e0 0f       	add	r30, r16
 250:	f1 1f       	adc	r31, r17
 252:	60 5d       	subi	r22, 0xD0	; 208
 254:	60 83       	st	Z, r22
        num /= 10;
 256:	62 2f       	mov	r22, r18
 258:	73 2f       	mov	r23, r19
 25a:	84 2f       	mov	r24, r20
 25c:	95 2f       	mov	r25, r21

void UART_printNumber(uint32_t num) {
    int i;
    char buf[10];

    for(i = 0; num > 0; ++i) {
 25e:	0f 5f       	subi	r16, 0xFF	; 255
 260:	1f 4f       	sbci	r17, 0xFF	; 255
 262:	61 15       	cp	r22, r1
 264:	71 05       	cpc	r23, r1
 266:	81 05       	cpc	r24, r1
 268:	91 05       	cpc	r25, r1
 26a:	39 f7       	brne	.-50     	; 0x23a <UART_printNumber+0x1e>
        buf[i] = num % 10 + '0';
        num /= 10;
    }

    for(int j = i - 1; j >= 0; --j) {
 26c:	01 50       	subi	r16, 0x01	; 1
 26e:	11 09       	sbc	r17, r1
 270:	0b c0       	rjmp	.+22     	; 0x288 <UART_printNumber+0x6c>
        UART_transmit(buf[j]);
 272:	e1 e0       	ldi	r30, 0x01	; 1
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ec 0f       	add	r30, r28
 278:	fd 1f       	adc	r31, r29
 27a:	e0 0f       	add	r30, r16
 27c:	f1 1f       	adc	r31, r17
 27e:	80 81       	ld	r24, Z
 280:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_transmit>
    for(i = 0; num > 0; ++i) {
        buf[i] = num % 10 + '0';
        num /= 10;
    }

    for(int j = i - 1; j >= 0; --j) {
 284:	01 50       	subi	r16, 0x01	; 1
 286:	11 09       	sbc	r17, r1
 288:	11 23       	and	r17, r17
 28a:	9c f7       	brge	.-26     	; 0x272 <UART_printNumber+0x56>
        UART_transmit(buf[j]);
    }
}
 28c:	2a 96       	adiw	r28, 0x0a	; 10
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	08 95       	ret

000002a2 <__divmodhi4>:
 2a2:	97 fb       	bst	r25, 7
 2a4:	07 2e       	mov	r0, r23
 2a6:	16 f4       	brtc	.+4      	; 0x2ac <__divmodhi4+0xa>
 2a8:	00 94       	com	r0
 2aa:	07 d0       	rcall	.+14     	; 0x2ba <__divmodhi4_neg1>
 2ac:	77 fd       	sbrc	r23, 7
 2ae:	09 d0       	rcall	.+18     	; 0x2c2 <__divmodhi4_neg2>
 2b0:	0e 94 87 01 	call	0x30e	; 0x30e <__udivmodhi4>
 2b4:	07 fc       	sbrc	r0, 7
 2b6:	05 d0       	rcall	.+10     	; 0x2c2 <__divmodhi4_neg2>
 2b8:	3e f4       	brtc	.+14     	; 0x2c8 <__divmodhi4_exit>

000002ba <__divmodhi4_neg1>:
 2ba:	90 95       	com	r25
 2bc:	81 95       	neg	r24
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	08 95       	ret

000002c2 <__divmodhi4_neg2>:
 2c2:	70 95       	com	r23
 2c4:	61 95       	neg	r22
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255

000002c8 <__divmodhi4_exit>:
 2c8:	08 95       	ret

000002ca <__udivmodsi4>:
 2ca:	a1 e2       	ldi	r26, 0x21	; 33
 2cc:	1a 2e       	mov	r1, r26
 2ce:	aa 1b       	sub	r26, r26
 2d0:	bb 1b       	sub	r27, r27
 2d2:	fd 01       	movw	r30, r26
 2d4:	0d c0       	rjmp	.+26     	; 0x2f0 <__udivmodsi4_ep>

000002d6 <__udivmodsi4_loop>:
 2d6:	aa 1f       	adc	r26, r26
 2d8:	bb 1f       	adc	r27, r27
 2da:	ee 1f       	adc	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	a2 17       	cp	r26, r18
 2e0:	b3 07       	cpc	r27, r19
 2e2:	e4 07       	cpc	r30, r20
 2e4:	f5 07       	cpc	r31, r21
 2e6:	20 f0       	brcs	.+8      	; 0x2f0 <__udivmodsi4_ep>
 2e8:	a2 1b       	sub	r26, r18
 2ea:	b3 0b       	sbc	r27, r19
 2ec:	e4 0b       	sbc	r30, r20
 2ee:	f5 0b       	sbc	r31, r21

000002f0 <__udivmodsi4_ep>:
 2f0:	66 1f       	adc	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	88 1f       	adc	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	1a 94       	dec	r1
 2fa:	69 f7       	brne	.-38     	; 0x2d6 <__udivmodsi4_loop>
 2fc:	60 95       	com	r22
 2fe:	70 95       	com	r23
 300:	80 95       	com	r24
 302:	90 95       	com	r25
 304:	9b 01       	movw	r18, r22
 306:	ac 01       	movw	r20, r24
 308:	bd 01       	movw	r22, r26
 30a:	cf 01       	movw	r24, r30
 30c:	08 95       	ret

0000030e <__udivmodhi4>:
 30e:	aa 1b       	sub	r26, r26
 310:	bb 1b       	sub	r27, r27
 312:	51 e1       	ldi	r21, 0x11	; 17
 314:	07 c0       	rjmp	.+14     	; 0x324 <__udivmodhi4_ep>

00000316 <__udivmodhi4_loop>:
 316:	aa 1f       	adc	r26, r26
 318:	bb 1f       	adc	r27, r27
 31a:	a6 17       	cp	r26, r22
 31c:	b7 07       	cpc	r27, r23
 31e:	10 f0       	brcs	.+4      	; 0x324 <__udivmodhi4_ep>
 320:	a6 1b       	sub	r26, r22
 322:	b7 0b       	sbc	r27, r23

00000324 <__udivmodhi4_ep>:
 324:	88 1f       	adc	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	5a 95       	dec	r21
 32a:	a9 f7       	brne	.-22     	; 0x316 <__udivmodhi4_loop>
 32c:	80 95       	com	r24
 32e:	90 95       	com	r25
 330:	bc 01       	movw	r22, r24
 332:	cd 01       	movw	r24, r26
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
