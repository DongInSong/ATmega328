
FinalProjcet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000007cc  00000860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080012c  0080012c  0000088c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000111f  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b19  00000000  00000000  00001b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4a  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052e  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066f  00000000  00000000  000037de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003e4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 33       	cpi	r26, 0x31	; 49
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  9e:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_4>:
// 3 PORTB green lights
unsigned char led_B[] = {0x08, 0x10, 0x20};
// 2 PORTC green lights
unsigned char led_C[] = {0x08, 0x10};
	
ISR(PCINT1_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	if(PINC & 0x20) {
  b4:	35 9b       	sbis	0x06, 5	; 6
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <__vector_4+0x1c>
		isPressing = 0;
  b8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <isPressing+0x1>
  bc:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <isPressing>
  c0:	06 c0       	rjmp	.+12     	; 0xce <__vector_4+0x28>
	}
	else {
		isPressing = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <isPressing+0x1>
  ca:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <isPressing>
	}
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <ShowOpenText>:

void ShowOpenText() {
	LCD_clear();
  dc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_clear>
	LCD_write_string("Welcome!! - ");
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_write_string>
  e8:	08 95       	ret

000000ea <active_led>:
}

void active_led() {
	if(isOpen) {
  ea:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
  ee:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__data_end+0x1>
  f2:	89 2b       	or	r24, r25
  f4:	21 f0       	breq	.+8      	; 0xfe <active_led+0x14>
		// red light off
		PORTD &= ~0x08;
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	08 95       	ret
	}
	else {
		// green lights off, red light on
		PORTD |= 0x08;
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	88 60       	ori	r24, 0x08	; 8
 102:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~0x38;
 104:	85 b1       	in	r24, 0x05	; 5
 106:	87 7c       	andi	r24, 0xC7	; 199
 108:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~0x18;
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	87 7e       	andi	r24, 0xE7	; 231
 10e:	88 b9       	out	0x08, r24	; 8
 110:	08 95       	ret

00000112 <active_Door>:
	}
}

void active_Door(uint8_t sec) {
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	d8 2f       	mov	r29, r24
	uint8_t i;
	// open door
	isOpen = 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 120:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
	OCR1A = PULSE_MAX;
 124:	8c e5       	ldi	r24, 0x5C	; 92
 126:	92 e1       	ldi	r25, 0x12	; 18
 128:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 12c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	for(i = 0; i < sec; i++) {
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	3c c0       	rjmp	.+120    	; 0x1ac <active_Door+0x9a>
		// for check distance in for loop;
		distance = measure_distance();
 134:	0e 94 1b 01 	call	0x236	; 0x236 <measure_distance>
 138:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <distance>
		
		// button press, distance check, reset door time
		if(isPressing || (distance >= 5 && distance <= 15)) {
 13c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <isPressing>
 140:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <isPressing+0x1>
 144:	23 2b       	or	r18, r19
 146:	19 f4       	brne	.+6      	; 0x14e <active_Door+0x3c>
 148:	85 50       	subi	r24, 0x05	; 5
 14a:	8b 30       	cpi	r24, 0x0B	; 11
 14c:	38 f4       	brcc	.+14     	; 0x15c <active_Door+0x4a>
			i = 0;
			PORTB &= ~0x38;
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	87 7c       	andi	r24, 0xC7	; 199
 152:	85 b9       	out	0x05, r24	; 5
			PORTC &= ~0x18;
 154:	88 b1       	in	r24, 0x08	; 8
 156:	87 7e       	andi	r24, 0xE7	; 231
 158:	88 b9       	out	0x08, r24	; 8
		// for check distance in for loop;
		distance = measure_distance();
		
		// button press, distance check, reset door time
		if(isPressing || (distance >= 5 && distance <= 15)) {
			i = 0;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
			PORTB &= ~0x38;
			PORTC &= ~0x18;
		}
		
		// green lights on
		if(i < 3) {
 15c:	c3 30       	cpi	r28, 0x03	; 3
 15e:	48 f4       	brcc	.+18     	; 0x172 <active_Door+0x60>
			PORTB |= led_B[i];
 160:	95 b1       	in	r25, 0x05	; 5
 162:	ec 2f       	mov	r30, r28
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	ed 5f       	subi	r30, 0xFD	; 253
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	80 81       	ld	r24, Z
 16c:	89 2b       	or	r24, r25
 16e:	85 b9       	out	0x05, r24	; 5
 170:	08 c0       	rjmp	.+16     	; 0x182 <active_Door+0x70>
		}
		else {
			PORTC |= led_C[i - 2];
 172:	98 b1       	in	r25, 0x08	; 8
 174:	ec 2f       	mov	r30, r28
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	e1 50       	subi	r30, 0x01	; 1
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	89 2b       	or	r24, r25
 180:	88 b9       	out	0x08, r24	; 8
		}
		
		// show texts
		ShowOpenText();
 182:	0e 94 6e 00 	call	0xdc	; 0xdc <ShowOpenText>
		LCD_write_data(num[i]);
 186:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <num>
 18a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <num+0x1>
 18e:	ec 0f       	add	r30, r28
 190:	f1 1d       	adc	r31, r1
 192:	80 81       	ld	r24, Z
 194:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	83 ed       	ldi	r24, 0xD3	; 211
 19c:	90 e3       	ldi	r25, 0x30	; 48
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <active_Door+0x8c>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <active_Door+0x96>
 1a8:	00 00       	nop
void active_Door(uint8_t sec) {
	uint8_t i;
	// open door
	isOpen = 1;
	OCR1A = PULSE_MAX;
	for(i = 0; i < sec; i++) {
 1aa:	cf 5f       	subi	r28, 0xFF	; 255
 1ac:	cd 17       	cp	r28, r29
 1ae:	10 f2       	brcs	.-124    	; 0x134 <active_Door+0x22>
		
		// delay 1000ms
		_delay_ms(ROTATION_DELAY);
	}
	// close door
	isOpen = 0;
 1b0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x1>
 1b4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
	OCR1A = PULSE_MIN;
 1b8:	84 e1       	ldi	r24, 0x14	; 20
 1ba:	95 e0       	ldi	r25, 0x05	; 5
 1bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	LCD_clear();
 1c4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_clear>
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <main>:
uint8_t MODE = 4;

int main(void)
{
	
	LCD_init();
 1ce:	0e 94 02 02 	call	0x404	; 0x404 <LCD_init>
	LCD_write_string("Initializing...");
 1d2:	85 e1       	ldi	r24, 0x15	; 21
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_write_string>

	INIT_PORT();
 1da:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <INIT_PORT>
	INIT_PCINT1();
 1de:	0e 94 74 01 	call	0x2e8	; 0x2e8 <INIT_PCINT1>
	
	UART_INIT();
 1e2:	0e 94 30 02 	call	0x460	; 0x460 <UART_INIT>
	INIT_TIMER1();
 1e6:	0e 94 84 01 	call	0x308	; 0x308 <INIT_TIMER1>
	INIT_TIMER0();
 1ea:	0e 94 80 01 	call	0x300	; 0x300 <INIT_TIMER0>
	
	
	while (1)
	{
		distance = measure_distance();
 1ee:	0e 94 1b 01 	call	0x236	; 0x236 <measure_distance>
 1f2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <distance>
		
		active_led();
 1f6:	0e 94 75 00 	call	0xea	; 0xea <active_led>
		
		if(isPressing || (distance >= 5 && distance <= 15)) {
 1fa:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <isPressing>
 1fe:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <isPressing+0x1>
 202:	89 2b       	or	r24, r25
 204:	29 f4       	brne	.+10     	; 0x210 <main+0x42>
 206:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <distance>
 20a:	85 50       	subi	r24, 0x05	; 5
 20c:	8b 30       	cpi	r24, 0x0B	; 11
 20e:	48 f4       	brcc	.+18     	; 0x222 <main+0x54>
			active_Door(5);
 210:	85 e0       	ldi	r24, 0x05	; 5
 212:	0e 94 89 00 	call	0x112	; 0x112 <active_Door>
 216:	8f e3       	ldi	r24, 0x3F	; 63
 218:	9c e9       	ldi	r25, 0x9C	; 156
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0x4c>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x52>
 220:	00 00       	nop
 222:	9f ef       	ldi	r25, 0xFF	; 255
 224:	21 ee       	ldi	r18, 0xE1	; 225
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	91 50       	subi	r25, 0x01	; 1
 22a:	20 40       	sbci	r18, 0x00	; 0
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0x5a>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x64>
 232:	00 00       	nop
 234:	dc cf       	rjmp	.-72     	; 0x1ee <main+0x20>

00000236 <measure_distance>:
﻿#include "modules.h"

uint8_t measure_distance(void) {
	PORTC |= (1 << PC0);
 236:	88 b1       	in	r24, 0x08	; 8
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	8f e3       	ldi	r24, 0x3F	; 63
 23e:	9c e9       	ldi	r25, 0x9C	; 156
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <measure_distance+0xa>
 244:	00 c0       	rjmp	.+0      	; 0x246 <measure_distance+0x10>
 246:	00 00       	nop
	_delay_ms(10);
	PORTC &= ~(1 << PC0);
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	88 b9       	out	0x08, r24	; 8
	
	TCNT0 = 0;
 24e:	16 bc       	out	0x26, r1	; 38
	while(!(PINC & 0x02))
 250:	03 c0       	rjmp	.+6      	; 0x258 <measure_distance+0x22>
	if(TCNT0 > 250) return 255;
 252:	86 b5       	in	r24, 0x26	; 38
 254:	8b 3f       	cpi	r24, 0xFB	; 251
 256:	68 f5       	brcc	.+90     	; 0x2b2 <measure_distance+0x7c>
	PORTC |= (1 << PC0);
	_delay_ms(10);
	PORTC &= ~(1 << PC0);
	
	TCNT0 = 0;
	while(!(PINC & 0x02))
 258:	31 9b       	sbis	0x06, 1	; 6
 25a:	fb cf       	rjmp	.-10     	; 0x252 <measure_distance+0x1c>
	if(TCNT0 > 250) return 255;
	
	TCNT0 = 0;
 25c:	16 bc       	out	0x26, r1	; 38
	while(PINC & 0x02) {
 25e:	05 c0       	rjmp	.+10     	; 0x26a <measure_distance+0x34>
		if(TCNT0 > 250) {
 260:	86 b5       	in	r24, 0x26	; 38
 262:	8b 3f       	cpi	r24, 0xFB	; 251
 264:	10 f0       	brcs	.+4      	; 0x26a <measure_distance+0x34>
			TCNT0 = 0;
 266:	16 bc       	out	0x26, r1	; 38
			break;
 268:	02 c0       	rjmp	.+4      	; 0x26e <measure_distance+0x38>
	TCNT0 = 0;
	while(!(PINC & 0x02))
	if(TCNT0 > 250) return 255;
	
	TCNT0 = 0;
	while(PINC & 0x02) {
 26a:	31 99       	sbic	0x06, 1	; 6
 26c:	f9 cf       	rjmp	.-14     	; 0x260 <measure_distance+0x2a>
		if(TCNT0 > 250) {
			TCNT0 = 0;
			break;
		}
	}
	double pulse_width = TCNT0 * PERSCALER * 1000000.0 / F_CPU;
 26e:	66 b5       	in	r22, 0x26	; 38
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	76 2f       	mov	r23, r22
 274:	66 27       	eor	r22, r22
 276:	77 0f       	add	r23, r23
 278:	77 0f       	add	r23, r23
 27a:	07 2e       	mov	r0, r23
 27c:	00 0c       	add	r0, r0
 27e:	88 0b       	sbc	r24, r24
 280:	99 0b       	sbc	r25, r25
 282:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__floatsisf>
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	34 e2       	ldi	r19, 0x24	; 36
 28a:	44 e7       	ldi	r20, 0x74	; 116
 28c:	59 e4       	ldi	r21, 0x49	; 73
 28e:	0e 94 77 03 	call	0x6ee	; 0x6ee <__mulsf3>
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	34 e2       	ldi	r19, 0x24	; 36
 296:	44 e7       	ldi	r20, 0x74	; 116
 298:	5b e4       	ldi	r21, 0x4B	; 75
 29a:	0e 94 48 02 	call	0x490	; 0x490 <__divsf3>
	
	return pulse_width / 58;
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	48 e6       	ldi	r20, 0x68	; 104
 2a4:	52 e4       	ldi	r21, 0x42	; 66
 2a6:	0e 94 48 02 	call	0x490	; 0x490 <__divsf3>
 2aa:	0e 94 ba 02 	call	0x574	; 0x574 <__fixunssfsi>
 2ae:	86 2f       	mov	r24, r22
 2b0:	08 95       	ret
	_delay_ms(10);
	PORTC &= ~(1 << PC0);
	
	TCNT0 = 0;
	while(!(PINC & 0x02))
	if(TCNT0 > 250) return 255;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	double pulse_width = TCNT0 * PERSCALER * 1000000.0 / F_CPU;
	
	return pulse_width / 58;
}
 2b4:	08 95       	ret

000002b6 <INIT_PORT>:

void INIT_PORT(void) {
	// Button (pull up)
	DDRC = 0x00;
 2b6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x20;
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	88 b9       	out	0x08, r24	; 8
	
	// leds
	DDRD |= 0x08;
 2bc:	8a b1       	in	r24, 0x0a	; 10
 2be:	88 60       	ori	r24, 0x08	; 8
 2c0:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~0x08;
 2c2:	8b b1       	in	r24, 0x0b	; 11
 2c4:	87 7f       	andi	r24, 0xF7	; 247
 2c6:	8b b9       	out	0x0b, r24	; 11
	DDRB |= 0x38;
 2c8:	84 b1       	in	r24, 0x04	; 4
 2ca:	88 63       	ori	r24, 0x38	; 56
 2cc:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~0x38;
 2ce:	85 b1       	in	r24, 0x05	; 5
 2d0:	87 7c       	andi	r24, 0xC7	; 199
 2d2:	85 b9       	out	0x05, r24	; 5
	DDRC |= 0x18;
 2d4:	87 b1       	in	r24, 0x07	; 7
 2d6:	88 61       	ori	r24, 0x18	; 24
 2d8:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~0x18;
 2da:	88 b1       	in	r24, 0x08	; 8
 2dc:	87 7e       	andi	r24, 0xE7	; 231
 2de:	88 b9       	out	0x08, r24	; 8
	
	// Sensor Output
	DDRC |= 0x01;
 2e0:	87 b1       	in	r24, 0x07	; 7
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	87 b9       	out	0x07, r24	; 7
 2e6:	08 95       	ret

000002e8 <INIT_PCINT1>:
}

void INIT_PCINT1(void) {
	PCICR |= (1 << PCIE1);
 2e8:	e8 e6       	ldi	r30, 0x68	; 104
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	82 60       	ori	r24, 0x02	; 2
 2f0:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT13);
 2f2:	ec e6       	ldi	r30, 0x6C	; 108
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	80 62       	ori	r24, 0x20	; 32
 2fa:	80 83       	st	Z, r24
	sei();
 2fc:	78 94       	sei
 2fe:	08 95       	ret

00000300 <INIT_TIMER0>:
}

void INIT_TIMER0(void) {
	TCCR0B |= (1 << CS02) | (1 << CS00);
 300:	85 b5       	in	r24, 0x25	; 37
 302:	85 60       	ori	r24, 0x05	; 5
 304:	85 bd       	out	0x25, r24	; 37
 306:	08 95       	ret

00000308 <INIT_TIMER1>:
}


void INIT_TIMER1(void) {
	TCCR1A |= (1 << WGM11);
 308:	e0 e8       	ldi	r30, 0x80	; 128
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	82 60       	ori	r24, 0x02	; 2
 310:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 312:	a1 e8       	ldi	r26, 0x81	; 129
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	8c 91       	ld	r24, X
 318:	88 61       	ori	r24, 0x18	; 24
 31a:	8c 93       	st	X, r24
	
	TCCR1B |= (1 << CS11);
 31c:	8c 91       	ld	r24, X
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	8c 93       	st	X, r24
	
	ICR1 = 40000;
 322:	80 e4       	ldi	r24, 0x40	; 64
 324:	9c e9       	ldi	r25, 0x9C	; 156
 326:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 32a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A |= (1 << COM1A1);
 32e:	80 81       	ld	r24, Z
 330:	80 68       	ori	r24, 0x80	; 128
 332:	80 83       	st	Z, r24
	DDRB |= 0x02;
 334:	84 b1       	in	r24, 0x04	; 4
 336:	82 60       	ori	r24, 0x02	; 2
 338:	84 b9       	out	0x04, r24	; 4
 33a:	08 95       	ret

0000033c <LCD_pulse_enable>:
	row %= 2;

	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;

	LCD_write_command(command);
 33c:	85 b1       	in	r24, 0x05	; 5
 33e:	84 60       	ori	r24, 0x04	; 4
 340:	85 b9       	out	0x05, r24	; 5
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	8a 95       	dec	r24
 346:	f1 f7       	brne	.-4      	; 0x344 <LCD_pulse_enable+0x8>
 348:	00 00       	nop
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	8b 7f       	andi	r24, 0xFB	; 251
 34e:	85 b9       	out	0x05, r24	; 5
 350:	8f e9       	ldi	r24, 0x9F	; 159
 352:	9f e0       	ldi	r25, 0x0F	; 15
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <LCD_pulse_enable+0x18>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_pulse_enable+0x1e>
 35a:	00 00       	nop
 35c:	08 95       	ret

0000035e <LCD_write_data>:
 35e:	cf 93       	push	r28
 360:	c8 2f       	mov	r28, r24
 362:	85 b1       	in	r24, 0x05	; 5
 364:	81 60       	ori	r24, 0x01	; 1
 366:	85 b9       	out	0x05, r24	; 5
 368:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 36c:	88 30       	cpi	r24, 0x08	; 8
 36e:	21 f4       	brne	.+8      	; 0x378 <LCD_write_data+0x1a>
 370:	cb b9       	out	0x0b, r28	; 11
 372:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_pulse_enable>
 376:	0c c0       	rjmp	.+24     	; 0x390 <LCD_write_data+0x32>
 378:	8c 2f       	mov	r24, r28
 37a:	80 7f       	andi	r24, 0xF0	; 240
 37c:	8b b9       	out	0x0b, r24	; 11
 37e:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_pulse_enable>
 382:	20 e1       	ldi	r18, 0x10	; 16
 384:	c2 9f       	mul	r28, r18
 386:	c0 01       	movw	r24, r0
 388:	11 24       	eor	r1, r1
 38a:	8b b9       	out	0x0b, r24	; 11
 38c:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_pulse_enable>
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <LCD_write_command>:
 394:	cf 93       	push	r28
 396:	c8 2f       	mov	r28, r24
 398:	85 b1       	in	r24, 0x05	; 5
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	85 b9       	out	0x05, r24	; 5
 39e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a2:	88 30       	cpi	r24, 0x08	; 8
 3a4:	21 f4       	brne	.+8      	; 0x3ae <LCD_write_command+0x1a>
 3a6:	cb b9       	out	0x0b, r28	; 11
 3a8:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_pulse_enable>
 3ac:	0c c0       	rjmp	.+24     	; 0x3c6 <LCD_write_command+0x32>
 3ae:	8c 2f       	mov	r24, r28
 3b0:	80 7f       	andi	r24, 0xF0	; 240
 3b2:	8b b9       	out	0x0b, r24	; 11
 3b4:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_pulse_enable>
 3b8:	20 e1       	ldi	r18, 0x10	; 16
 3ba:	c2 9f       	mul	r28, r18
 3bc:	c0 01       	movw	r24, r0
 3be:	11 24       	eor	r1, r1
 3c0:	8b b9       	out	0x0b, r24	; 11
 3c2:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_pulse_enable>
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <LCD_clear>:
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_write_command>
 3d0:	8f e3       	ldi	r24, 0x3F	; 63
 3d2:	9f e1       	ldi	r25, 0x1F	; 31
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <LCD_clear+0xa>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_clear+0x10>
 3da:	00 00       	nop
 3dc:	08 95       	ret

000003de <LCD_write_string>:
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	8c 01       	movw	r16, r24
 3e6:	c0 e0       	ldi	r28, 0x00	; 0
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <LCD_write_string+0x12>
 3ea:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_write_data>
 3ee:	cf 5f       	subi	r28, 0xFF	; 255
 3f0:	f8 01       	movw	r30, r16
 3f2:	ec 0f       	add	r30, r28
 3f4:	f1 1d       	adc	r31, r1
 3f6:	80 81       	ld	r24, Z
 3f8:	81 11       	cpse	r24, r1
 3fa:	f7 cf       	rjmp	.-18     	; 0x3ea <LCD_write_string+0xc>
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	08 95       	ret

00000404 <LCD_init>:
 404:	2f ef       	ldi	r18, 0xFF	; 255
 406:	80 e7       	ldi	r24, 0x70	; 112
 408:	92 e0       	ldi	r25, 0x02	; 2
 40a:	21 50       	subi	r18, 0x01	; 1
 40c:	80 40       	sbci	r24, 0x00	; 0
 40e:	90 40       	sbci	r25, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <LCD_init+0x6>
 412:	00 c0       	rjmp	.+0      	; 0x414 <LCD_init+0x10>
 414:	00 00       	nop

	//DDR_DATA = 0xFF;
	
	
	_delay_ms(50);
	if(MODE == 8) DDR_DATA = 0xFF;
 416:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 41a:	88 30       	cpi	r24, 0x08	; 8
 41c:	19 f4       	brne	.+6      	; 0x424 <LCD_init+0x20>
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	8a b9       	out	0x0a, r24	; 10
 422:	03 c0       	rjmp	.+6      	; 0x42a <LCD_init+0x26>
	else DDR_DATA |= 0xF0;
 424:	8a b1       	in	r24, 0x0a	; 10
 426:	80 6f       	ori	r24, 0xF0	; 240
 428:	8a b9       	out	0x0a, r24	; 10
	
	PORT_DATA = 0x00;
 42a:	1b b8       	out	0x0b, r1	; 11
	DDR_CONTROL |= (1 << RS_PIN) | (1 << E_PIN);
 42c:	84 b1       	in	r24, 0x04	; 4
 42e:	85 60       	ori	r24, 0x05	; 5
 430:	84 b9       	out	0x04, r24	; 4

	if(MODE == 8)
 432:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 436:	88 30       	cpi	r24, 0x08	; 8
 438:	21 f4       	brne	.+8      	; 0x442 <LCD_init+0x3e>
	LCD_write_command(COMMAND_8_BIT_MODE);
 43a:	88 e3       	ldi	r24, 0x38	; 56
 43c:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_write_command>
 440:	06 c0       	rjmp	.+12     	; 0x44e <LCD_init+0x4a>
	else {
		LCD_write_command(0x02);
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_write_command>
		LCD_write_command(COMMAND_4_BIT_MODE);
 448:	88 e2       	ldi	r24, 0x28	; 40
 44a:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_write_command>
	}

	uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
 44e:	8c e0       	ldi	r24, 0x0C	; 12
 450:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_write_command>

	LCD_clear();
 454:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_clear>

	LCD_write_command(0x06);
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_write_command>
 45e:	08 95       	ret

00000460 <UART_INIT>:
#include "UART.h"

void UART_INIT(void) {
    UCSR0A |= _BV(U2X0);
 460:	e0 ec       	ldi	r30, 0xC0	; 192
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	82 60       	ori	r24, 0x02	; 2
 468:	80 83       	st	Z, r24
    UBRR0H = 0x00;
 46a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = 207;
 46e:	8f ec       	ldi	r24, 0xCF	; 207
 470:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    UCSR0C |= 0x06;
 474:	e2 ec       	ldi	r30, 0xC2	; 194
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	86 60       	ori	r24, 0x06	; 6
 47c:	80 83       	st	Z, r24
    UCSR0B |= _BV(RXEN0);
 47e:	e1 ec       	ldi	r30, 0xC1	; 193
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	80 61       	ori	r24, 0x10	; 16
 486:	80 83       	st	Z, r24
    UCSR0B |= _BV(TXEN0);
 488:	80 81       	ld	r24, Z
 48a:	88 60       	ori	r24, 0x08	; 8
 48c:	80 83       	st	Z, r24
 48e:	08 95       	ret

00000490 <__divsf3>:
 490:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__divsf3x>
 494:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_round>
 498:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_pscB>
 49c:	58 f0       	brcs	.+22     	; 0x4b4 <__divsf3+0x24>
 49e:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_pscA>
 4a2:	40 f0       	brcs	.+16     	; 0x4b4 <__divsf3+0x24>
 4a4:	29 f4       	brne	.+10     	; 0x4b0 <__divsf3+0x20>
 4a6:	5f 3f       	cpi	r21, 0xFF	; 255
 4a8:	29 f0       	breq	.+10     	; 0x4b4 <__divsf3+0x24>
 4aa:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_inf>
 4ae:	51 11       	cpse	r21, r1
 4b0:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_szero>
 4b4:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_nan>

000004b8 <__divsf3x>:
 4b8:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_split3>
 4bc:	68 f3       	brcs	.-38     	; 0x498 <__divsf3+0x8>

000004be <__divsf3_pse>:
 4be:	99 23       	and	r25, r25
 4c0:	b1 f3       	breq	.-20     	; 0x4ae <__divsf3+0x1e>
 4c2:	55 23       	and	r21, r21
 4c4:	91 f3       	breq	.-28     	; 0x4aa <__divsf3+0x1a>
 4c6:	95 1b       	sub	r25, r21
 4c8:	55 0b       	sbc	r21, r21
 4ca:	bb 27       	eor	r27, r27
 4cc:	aa 27       	eor	r26, r26
 4ce:	62 17       	cp	r22, r18
 4d0:	73 07       	cpc	r23, r19
 4d2:	84 07       	cpc	r24, r20
 4d4:	38 f0       	brcs	.+14     	; 0x4e4 <__divsf3_pse+0x26>
 4d6:	9f 5f       	subi	r25, 0xFF	; 255
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	44 1f       	adc	r20, r20
 4e0:	aa 1f       	adc	r26, r26
 4e2:	a9 f3       	breq	.-22     	; 0x4ce <__divsf3_pse+0x10>
 4e4:	35 d0       	rcall	.+106    	; 0x550 <__divsf3_pse+0x92>
 4e6:	0e 2e       	mov	r0, r30
 4e8:	3a f0       	brmi	.+14     	; 0x4f8 <__divsf3_pse+0x3a>
 4ea:	e0 e8       	ldi	r30, 0x80	; 128
 4ec:	32 d0       	rcall	.+100    	; 0x552 <__divsf3_pse+0x94>
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	50 40       	sbci	r21, 0x00	; 0
 4f2:	e6 95       	lsr	r30
 4f4:	00 1c       	adc	r0, r0
 4f6:	ca f7       	brpl	.-14     	; 0x4ea <__divsf3_pse+0x2c>
 4f8:	2b d0       	rcall	.+86     	; 0x550 <__divsf3_pse+0x92>
 4fa:	fe 2f       	mov	r31, r30
 4fc:	29 d0       	rcall	.+82     	; 0x550 <__divsf3_pse+0x92>
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	bb 1f       	adc	r27, r27
 506:	26 17       	cp	r18, r22
 508:	37 07       	cpc	r19, r23
 50a:	48 07       	cpc	r20, r24
 50c:	ab 07       	cpc	r26, r27
 50e:	b0 e8       	ldi	r27, 0x80	; 128
 510:	09 f0       	breq	.+2      	; 0x514 <__divsf3_pse+0x56>
 512:	bb 0b       	sbc	r27, r27
 514:	80 2d       	mov	r24, r0
 516:	bf 01       	movw	r22, r30
 518:	ff 27       	eor	r31, r31
 51a:	93 58       	subi	r25, 0x83	; 131
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	3a f0       	brmi	.+14     	; 0x52e <__divsf3_pse+0x70>
 520:	9e 3f       	cpi	r25, 0xFE	; 254
 522:	51 05       	cpc	r21, r1
 524:	78 f0       	brcs	.+30     	; 0x544 <__divsf3_pse+0x86>
 526:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_inf>
 52a:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_szero>
 52e:	5f 3f       	cpi	r21, 0xFF	; 255
 530:	e4 f3       	brlt	.-8      	; 0x52a <__divsf3_pse+0x6c>
 532:	98 3e       	cpi	r25, 0xE8	; 232
 534:	d4 f3       	brlt	.-12     	; 0x52a <__divsf3_pse+0x6c>
 536:	86 95       	lsr	r24
 538:	77 95       	ror	r23
 53a:	67 95       	ror	r22
 53c:	b7 95       	ror	r27
 53e:	f7 95       	ror	r31
 540:	9f 5f       	subi	r25, 0xFF	; 255
 542:	c9 f7       	brne	.-14     	; 0x536 <__divsf3_pse+0x78>
 544:	88 0f       	add	r24, r24
 546:	91 1d       	adc	r25, r1
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret
 550:	e1 e0       	ldi	r30, 0x01	; 1
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	bb 1f       	adc	r27, r27
 55a:	62 17       	cp	r22, r18
 55c:	73 07       	cpc	r23, r19
 55e:	84 07       	cpc	r24, r20
 560:	ba 07       	cpc	r27, r26
 562:	20 f0       	brcs	.+8      	; 0x56c <__divsf3_pse+0xae>
 564:	62 1b       	sub	r22, r18
 566:	73 0b       	sbc	r23, r19
 568:	84 0b       	sbc	r24, r20
 56a:	ba 0b       	sbc	r27, r26
 56c:	ee 1f       	adc	r30, r30
 56e:	88 f7       	brcc	.-30     	; 0x552 <__divsf3_pse+0x94>
 570:	e0 95       	com	r30
 572:	08 95       	ret

00000574 <__fixunssfsi>:
 574:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_splitA>
 578:	88 f0       	brcs	.+34     	; 0x59c <__fixunssfsi+0x28>
 57a:	9f 57       	subi	r25, 0x7F	; 127
 57c:	98 f0       	brcs	.+38     	; 0x5a4 <__fixunssfsi+0x30>
 57e:	b9 2f       	mov	r27, r25
 580:	99 27       	eor	r25, r25
 582:	b7 51       	subi	r27, 0x17	; 23
 584:	b0 f0       	brcs	.+44     	; 0x5b2 <__fixunssfsi+0x3e>
 586:	e1 f0       	breq	.+56     	; 0x5c0 <__fixunssfsi+0x4c>
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	1a f0       	brmi	.+6      	; 0x598 <__fixunssfsi+0x24>
 592:	ba 95       	dec	r27
 594:	c9 f7       	brne	.-14     	; 0x588 <__fixunssfsi+0x14>
 596:	14 c0       	rjmp	.+40     	; 0x5c0 <__fixunssfsi+0x4c>
 598:	b1 30       	cpi	r27, 0x01	; 1
 59a:	91 f0       	breq	.+36     	; 0x5c0 <__fixunssfsi+0x4c>
 59c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_zero>
 5a0:	b1 e0       	ldi	r27, 0x01	; 1
 5a2:	08 95       	ret
 5a4:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__fp_zero>
 5a8:	67 2f       	mov	r22, r23
 5aa:	78 2f       	mov	r23, r24
 5ac:	88 27       	eor	r24, r24
 5ae:	b8 5f       	subi	r27, 0xF8	; 248
 5b0:	39 f0       	breq	.+14     	; 0x5c0 <__fixunssfsi+0x4c>
 5b2:	b9 3f       	cpi	r27, 0xF9	; 249
 5b4:	cc f3       	brlt	.-14     	; 0x5a8 <__fixunssfsi+0x34>
 5b6:	86 95       	lsr	r24
 5b8:	77 95       	ror	r23
 5ba:	67 95       	ror	r22
 5bc:	b3 95       	inc	r27
 5be:	d9 f7       	brne	.-10     	; 0x5b6 <__fixunssfsi+0x42>
 5c0:	3e f4       	brtc	.+14     	; 0x5d0 <__fixunssfsi+0x5c>
 5c2:	90 95       	com	r25
 5c4:	80 95       	com	r24
 5c6:	70 95       	com	r23
 5c8:	61 95       	neg	r22
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	08 95       	ret

000005d2 <__floatunsisf>:
 5d2:	e8 94       	clt
 5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <__floatsisf+0x12>

000005d6 <__floatsisf>:
 5d6:	97 fb       	bst	r25, 7
 5d8:	3e f4       	brtc	.+14     	; 0x5e8 <__floatsisf+0x12>
 5da:	90 95       	com	r25
 5dc:	80 95       	com	r24
 5de:	70 95       	com	r23
 5e0:	61 95       	neg	r22
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	99 23       	and	r25, r25
 5ea:	a9 f0       	breq	.+42     	; 0x616 <__floatsisf+0x40>
 5ec:	f9 2f       	mov	r31, r25
 5ee:	96 e9       	ldi	r25, 0x96	; 150
 5f0:	bb 27       	eor	r27, r27
 5f2:	93 95       	inc	r25
 5f4:	f6 95       	lsr	r31
 5f6:	87 95       	ror	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b7 95       	ror	r27
 5fe:	f1 11       	cpse	r31, r1
 600:	f8 cf       	rjmp	.-16     	; 0x5f2 <__floatsisf+0x1c>
 602:	fa f4       	brpl	.+62     	; 0x642 <__floatsisf+0x6c>
 604:	bb 0f       	add	r27, r27
 606:	11 f4       	brne	.+4      	; 0x60c <__floatsisf+0x36>
 608:	60 ff       	sbrs	r22, 0
 60a:	1b c0       	rjmp	.+54     	; 0x642 <__floatsisf+0x6c>
 60c:	6f 5f       	subi	r22, 0xFF	; 255
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	16 c0       	rjmp	.+44     	; 0x642 <__floatsisf+0x6c>
 616:	88 23       	and	r24, r24
 618:	11 f0       	breq	.+4      	; 0x61e <__floatsisf+0x48>
 61a:	96 e9       	ldi	r25, 0x96	; 150
 61c:	11 c0       	rjmp	.+34     	; 0x640 <__floatsisf+0x6a>
 61e:	77 23       	and	r23, r23
 620:	21 f0       	breq	.+8      	; 0x62a <__floatsisf+0x54>
 622:	9e e8       	ldi	r25, 0x8E	; 142
 624:	87 2f       	mov	r24, r23
 626:	76 2f       	mov	r23, r22
 628:	05 c0       	rjmp	.+10     	; 0x634 <__floatsisf+0x5e>
 62a:	66 23       	and	r22, r22
 62c:	71 f0       	breq	.+28     	; 0x64a <__floatsisf+0x74>
 62e:	96 e8       	ldi	r25, 0x86	; 134
 630:	86 2f       	mov	r24, r22
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	2a f0       	brmi	.+10     	; 0x642 <__floatsisf+0x6c>
 638:	9a 95       	dec	r25
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	88 1f       	adc	r24, r24
 640:	da f7       	brpl	.-10     	; 0x638 <__floatsisf+0x62>
 642:	88 0f       	add	r24, r24
 644:	96 95       	lsr	r25
 646:	87 95       	ror	r24
 648:	97 f9       	bld	r25, 7
 64a:	08 95       	ret

0000064c <__fp_inf>:
 64c:	97 f9       	bld	r25, 7
 64e:	9f 67       	ori	r25, 0x7F	; 127
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	08 95       	ret

00000658 <__fp_nan>:
 658:	9f ef       	ldi	r25, 0xFF	; 255
 65a:	80 ec       	ldi	r24, 0xC0	; 192
 65c:	08 95       	ret

0000065e <__fp_pscA>:
 65e:	00 24       	eor	r0, r0
 660:	0a 94       	dec	r0
 662:	16 16       	cp	r1, r22
 664:	17 06       	cpc	r1, r23
 666:	18 06       	cpc	r1, r24
 668:	09 06       	cpc	r0, r25
 66a:	08 95       	ret

0000066c <__fp_pscB>:
 66c:	00 24       	eor	r0, r0
 66e:	0a 94       	dec	r0
 670:	12 16       	cp	r1, r18
 672:	13 06       	cpc	r1, r19
 674:	14 06       	cpc	r1, r20
 676:	05 06       	cpc	r0, r21
 678:	08 95       	ret

0000067a <__fp_round>:
 67a:	09 2e       	mov	r0, r25
 67c:	03 94       	inc	r0
 67e:	00 0c       	add	r0, r0
 680:	11 f4       	brne	.+4      	; 0x686 <__fp_round+0xc>
 682:	88 23       	and	r24, r24
 684:	52 f0       	brmi	.+20     	; 0x69a <__fp_round+0x20>
 686:	bb 0f       	add	r27, r27
 688:	40 f4       	brcc	.+16     	; 0x69a <__fp_round+0x20>
 68a:	bf 2b       	or	r27, r31
 68c:	11 f4       	brne	.+4      	; 0x692 <__fp_round+0x18>
 68e:	60 ff       	sbrs	r22, 0
 690:	04 c0       	rjmp	.+8      	; 0x69a <__fp_round+0x20>
 692:	6f 5f       	subi	r22, 0xFF	; 255
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	08 95       	ret

0000069c <__fp_split3>:
 69c:	57 fd       	sbrc	r21, 7
 69e:	90 58       	subi	r25, 0x80	; 128
 6a0:	44 0f       	add	r20, r20
 6a2:	55 1f       	adc	r21, r21
 6a4:	59 f0       	breq	.+22     	; 0x6bc <__fp_splitA+0x10>
 6a6:	5f 3f       	cpi	r21, 0xFF	; 255
 6a8:	71 f0       	breq	.+28     	; 0x6c6 <__fp_splitA+0x1a>
 6aa:	47 95       	ror	r20

000006ac <__fp_splitA>:
 6ac:	88 0f       	add	r24, r24
 6ae:	97 fb       	bst	r25, 7
 6b0:	99 1f       	adc	r25, r25
 6b2:	61 f0       	breq	.+24     	; 0x6cc <__fp_splitA+0x20>
 6b4:	9f 3f       	cpi	r25, 0xFF	; 255
 6b6:	79 f0       	breq	.+30     	; 0x6d6 <__fp_splitA+0x2a>
 6b8:	87 95       	ror	r24
 6ba:	08 95       	ret
 6bc:	12 16       	cp	r1, r18
 6be:	13 06       	cpc	r1, r19
 6c0:	14 06       	cpc	r1, r20
 6c2:	55 1f       	adc	r21, r21
 6c4:	f2 cf       	rjmp	.-28     	; 0x6aa <__fp_split3+0xe>
 6c6:	46 95       	lsr	r20
 6c8:	f1 df       	rcall	.-30     	; 0x6ac <__fp_splitA>
 6ca:	08 c0       	rjmp	.+16     	; 0x6dc <__fp_splitA+0x30>
 6cc:	16 16       	cp	r1, r22
 6ce:	17 06       	cpc	r1, r23
 6d0:	18 06       	cpc	r1, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	f1 cf       	rjmp	.-30     	; 0x6b8 <__fp_splitA+0xc>
 6d6:	86 95       	lsr	r24
 6d8:	71 05       	cpc	r23, r1
 6da:	61 05       	cpc	r22, r1
 6dc:	08 94       	sec
 6de:	08 95       	ret

000006e0 <__fp_zero>:
 6e0:	e8 94       	clt

000006e2 <__fp_szero>:
 6e2:	bb 27       	eor	r27, r27
 6e4:	66 27       	eor	r22, r22
 6e6:	77 27       	eor	r23, r23
 6e8:	cb 01       	movw	r24, r22
 6ea:	97 f9       	bld	r25, 7
 6ec:	08 95       	ret

000006ee <__mulsf3>:
 6ee:	0e 94 8a 03 	call	0x714	; 0x714 <__mulsf3x>
 6f2:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_round>
 6f6:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_pscA>
 6fa:	38 f0       	brcs	.+14     	; 0x70a <__mulsf3+0x1c>
 6fc:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_pscB>
 700:	20 f0       	brcs	.+8      	; 0x70a <__mulsf3+0x1c>
 702:	95 23       	and	r25, r21
 704:	11 f0       	breq	.+4      	; 0x70a <__mulsf3+0x1c>
 706:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_inf>
 70a:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_nan>
 70e:	11 24       	eor	r1, r1
 710:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_szero>

00000714 <__mulsf3x>:
 714:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_split3>
 718:	70 f3       	brcs	.-36     	; 0x6f6 <__mulsf3+0x8>

0000071a <__mulsf3_pse>:
 71a:	95 9f       	mul	r25, r21
 71c:	c1 f3       	breq	.-16     	; 0x70e <__mulsf3+0x20>
 71e:	95 0f       	add	r25, r21
 720:	50 e0       	ldi	r21, 0x00	; 0
 722:	55 1f       	adc	r21, r21
 724:	62 9f       	mul	r22, r18
 726:	f0 01       	movw	r30, r0
 728:	72 9f       	mul	r23, r18
 72a:	bb 27       	eor	r27, r27
 72c:	f0 0d       	add	r31, r0
 72e:	b1 1d       	adc	r27, r1
 730:	63 9f       	mul	r22, r19
 732:	aa 27       	eor	r26, r26
 734:	f0 0d       	add	r31, r0
 736:	b1 1d       	adc	r27, r1
 738:	aa 1f       	adc	r26, r26
 73a:	64 9f       	mul	r22, r20
 73c:	66 27       	eor	r22, r22
 73e:	b0 0d       	add	r27, r0
 740:	a1 1d       	adc	r26, r1
 742:	66 1f       	adc	r22, r22
 744:	82 9f       	mul	r24, r18
 746:	22 27       	eor	r18, r18
 748:	b0 0d       	add	r27, r0
 74a:	a1 1d       	adc	r26, r1
 74c:	62 1f       	adc	r22, r18
 74e:	73 9f       	mul	r23, r19
 750:	b0 0d       	add	r27, r0
 752:	a1 1d       	adc	r26, r1
 754:	62 1f       	adc	r22, r18
 756:	83 9f       	mul	r24, r19
 758:	a0 0d       	add	r26, r0
 75a:	61 1d       	adc	r22, r1
 75c:	22 1f       	adc	r18, r18
 75e:	74 9f       	mul	r23, r20
 760:	33 27       	eor	r19, r19
 762:	a0 0d       	add	r26, r0
 764:	61 1d       	adc	r22, r1
 766:	23 1f       	adc	r18, r19
 768:	84 9f       	mul	r24, r20
 76a:	60 0d       	add	r22, r0
 76c:	21 1d       	adc	r18, r1
 76e:	82 2f       	mov	r24, r18
 770:	76 2f       	mov	r23, r22
 772:	6a 2f       	mov	r22, r26
 774:	11 24       	eor	r1, r1
 776:	9f 57       	subi	r25, 0x7F	; 127
 778:	50 40       	sbci	r21, 0x00	; 0
 77a:	9a f0       	brmi	.+38     	; 0x7a2 <__mulsf3_pse+0x88>
 77c:	f1 f0       	breq	.+60     	; 0x7ba <__mulsf3_pse+0xa0>
 77e:	88 23       	and	r24, r24
 780:	4a f0       	brmi	.+18     	; 0x794 <__mulsf3_pse+0x7a>
 782:	ee 0f       	add	r30, r30
 784:	ff 1f       	adc	r31, r31
 786:	bb 1f       	adc	r27, r27
 788:	66 1f       	adc	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	91 50       	subi	r25, 0x01	; 1
 790:	50 40       	sbci	r21, 0x00	; 0
 792:	a9 f7       	brne	.-22     	; 0x77e <__mulsf3_pse+0x64>
 794:	9e 3f       	cpi	r25, 0xFE	; 254
 796:	51 05       	cpc	r21, r1
 798:	80 f0       	brcs	.+32     	; 0x7ba <__mulsf3_pse+0xa0>
 79a:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_inf>
 79e:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_szero>
 7a2:	5f 3f       	cpi	r21, 0xFF	; 255
 7a4:	e4 f3       	brlt	.-8      	; 0x79e <__mulsf3_pse+0x84>
 7a6:	98 3e       	cpi	r25, 0xE8	; 232
 7a8:	d4 f3       	brlt	.-12     	; 0x79e <__mulsf3_pse+0x84>
 7aa:	86 95       	lsr	r24
 7ac:	77 95       	ror	r23
 7ae:	67 95       	ror	r22
 7b0:	b7 95       	ror	r27
 7b2:	f7 95       	ror	r31
 7b4:	e7 95       	ror	r30
 7b6:	9f 5f       	subi	r25, 0xFF	; 255
 7b8:	c1 f7       	brne	.-16     	; 0x7aa <__mulsf3_pse+0x90>
 7ba:	fe 2b       	or	r31, r30
 7bc:	88 0f       	add	r24, r24
 7be:	91 1d       	adc	r25, r1
 7c0:	96 95       	lsr	r25
 7c2:	87 95       	ror	r24
 7c4:	97 f9       	bld	r25, 7
 7c6:	08 95       	ret

000007c8 <_exit>:
 7c8:	f8 94       	cli

000007ca <__stop_program>:
 7ca:	ff cf       	rjmp	.-2      	; 0x7ca <__stop_program>
